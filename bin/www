#!/usr/bin/env node

/*

        @Author : Tejas07PSK (Palash Sarkar),
        @CreatedON : 03 Jan, 2019, 10:58  PM,
        @File-Name : www.js

 */

"use strict";

// 'www' dependency vars.

const app = require('../app');
const debug = require('debug')('scrapo:server');
const http = require('http');

// parse port-number from environment and store in 'express'.

const port = normalizePort(process.env.PORT || '8000');

// parse 'port' into a number, string, or false.

function normalizePort(val) {

    let port = parseInt(val, 10);
    if (isNaN(port)) { /* named pipe */ return(val); }
    else if (port >= 0) { /* port number */ return (port); }
    return (false);

}

app.set('port', port);
process.title = 'scrapo';

// create and set-up 'HTTP' server.

const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// event listener for HTTP server "error" event.

function onError(error) {

    if ((error.syscall) !== 'listen') { throw (error); }
    let bind = ((typeof port === 'string') ? ('Pipe ' + port) : ('Port ' + port));

    // handle specific listen errors with friendly messages.

    switch (error.code) {

        case 'EACCES' : console.error(bind + ' - requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE' : console.error(bind + ' - is already in use');
            process.exit(1);
            break;
        default : throw (error);

    }

}

// event listener for HTTP server "listening" event.

function onListening() {

    let addr = server.address(), bind = ((typeof addr === 'string') ? ('pipe ' + addr) : ('port ' + addr.port));
    debug('Listening on - ' + bind);

}